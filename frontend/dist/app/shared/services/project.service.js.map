{"version":3,"file":"project.service.js","sourceRoot":"","sources":["project.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAA4B,eAAe,CAAC,CAAA;AAI5C;IAII,wBAAmB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;QAH5B,cAAS,GAAU,gBAAgB,CAAC;QACpC,YAAO,GAAG,IAAI,cAAO,EAAE,CAAC;IAGxB,CAAC;IAEO,oCAAW,GAAnB,UAAoB,UAAU,EAAE,MAAM;QAClC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aACxE,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IAC1C,CAAC;IAED,oCAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,mCAAU,GAAV,UAAW,EAAE;QACT,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,EAAE,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC;IAC/D,CAAC;IAED,mCAAU,GAAV,UAAW,OAAO;QACd,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,EAAE,OAAO,CAAC,CAAC;IAChE,CAAC;IAED,sCAAa,GAAb,UAAc,OAAO,EAAE,IAAI;QACvB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED,sCAAa,GAAb,UAAc,EAAE;QACZ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,oCAAW,GAAX,UAAY,EAAE;QACV,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IAC7C,CAAC;IAED,qCAAY,GAAZ,UAAa,EAAE;QACX,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC;IAC9C,CAAC;IA3CL;QAAC,iBAAU,EAAE;;sBAAA;IA4Cb,qBAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,sBAAc,iBA0C1B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Headers} from \"@angular/http\";\n\n@Injectable()\n\nexport class ProjectService {\n    serverUrl:string = '/api/projects/';\n    headers = new Headers();\n\n    constructor(public http:Http) {\n    }\n\n    private makeRequest(requestURL, object) {\n        var headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\n        return this.http.post(requestURL, JSON.stringify(object), {headers: headers})\n            .map(response => response.json());\n    }\n\n    getProjects() {\n        return this.makeRequest(this.serverUrl, {});\n    }\n\n    getProject(id) {\n        return this.makeRequest(this.serverUrl + 'read', {id: id});\n    }\n\n    setProject(project) {\n        return this.makeRequest(this.serverUrl + 'create', project);\n    }\n\n    updateProject(project, data) {\n        return this.makeRequest(this.serverUrl + 'update', data);\n    }\n\n    removeProject(id) {\n        return this.makeRequest(this.serverUrl + 'delete', id);\n    }\n\n    openProject(id) {\n        this.updateProject(id, {isOpened: true});\n    }\n\n    closeProject(id) {\n        this.updateProject(id, {isOpened: false});\n    }\n}"]}